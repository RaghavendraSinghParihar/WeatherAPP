apply plugin: 'com.android.application'
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.health.test"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 6
        versionName "1.3"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        dexOptions {
            javaMaxHeapSize = "4g"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://api.openweathermap.org\""
            manifestPlaceholders = [usesCleartextTraffic: "true"]
        }
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://api.openweathermap.org\""
            manifestPlaceholders = [usesCleartextTraffic: "true"]
            debuggable true
            minifyEnabled false
            android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def formattedDate = new Date().format('ddMMyyyyHHmmss')
                    outputFileName = getAppName() + "_" /*+ formattedDate */ + "${output.baseName}_${variant.versionName}.apk"
                }
            }
        }
    }
}

def getAppName() {
    def stringsFile = android.sourceSets.main.res.sourceFiles.find { it.name.equals 'strings.xml' }
    return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_name' }.text()
}

configurations.all {
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
            arg("room.incremental", "true")
            arg("room.expandProjection", "true")
        }
    }
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion project.ANDROID_SUPPORT_VERSION
            }
        }
    }
}
dependencies {
    implementation project(':mvvmbase')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'

 //   implementation 'com.google.firebase:firebase-ads:19.7.0'
    implementation 'com.google.firebase:firebase-firestore-ktx:22.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.airbnb.android:lottie:2.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.amitshekhar.android:rx2-android-networking:1.0.2'
    implementation 'com.android.support:multidex:2.0.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.8.1'
    //firebase
    implementation 'com.google.firebase:firebase-core:18.0.2'
    implementation 'com.google.firebase:firebase-database:19.6.0'
    implementation 'com.google.firebase:firebase-storage:19.2.1'
    //geofirebase
    implementation 'com.firebase:geofire-android:2.3.1'
    // chart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    //koin
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.2.0'
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    //DI - Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    //Networking
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutines_adapter"

    // Kotlin components
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation 'com.google.firebase:firebase-firestore:22.1.2'
    implementation 'com.google.android.gms:play-services-ads:19.8.0'
//room
//    implementation "android.arch.persistence.room:runtime:$room_version"
//    kapt "android.arch.persistence.room:compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

}
